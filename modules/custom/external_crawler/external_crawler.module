<?php

/**
 * @file
 * Code for the External Crawler.
 */

include_once 'external_crawler.functions.inc';

define('EXTERNAL_CRAWLER_ENTITY_TYPE', 'external_crawler');

/**
 * Implements hook_menu().
 */
function external_crawler_menu() {
  $menu = array();

  $menu['admin/config/search/external_crawler'] = array(
    'title' => 'External Crawler',
    'page callback' => 'external_crawler_page_list',
    'access arguments' => array('administer external crawler'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'external_crawler.admin.inc',
  );

  $menu['admin/config/search/external_crawler/site/add'] = array(
    'title' => 'Add site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_crawler_site_add_form'),
    'access arguments' => array('administer external crawler'),
    'file' => 'external_crawler.admin.inc',
  );

  $menu['admin/config/search/external_crawler/site/%/edit'] = array(
    'title' => 'Edit site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_crawler_site_edit_form', 5),
    'access arguments' => array('administer external crawler'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'external_crawler.admin.inc',
  );

  $menu['admin/config/search/external_crawler/site/%/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('external_crawler_site_delete_confirm', 5),
    'access arguments' => array('administer external crawler'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'external_crawler.admin.inc',
  );

  return $menu;
}

/**
 * Implements hook_admin_paths().
 */
function external_crawler_admin_paths() {
  $paths = array(
    'admin/config/search/external_crawler' => TRUE,
    'admin/config/search/external_crawler/site/add' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_permission().
 */
function external_crawler_permission() {
  return array(
    'administer external crawler' => array(
      'title' => t('Administer External Crawler'),
      'description' => t('Add/edit and delete external sites.'),
    ),
    'access content include/exclude' => array(
      'title' => t('Administer content exclude/include'),
      'description' => t('Manage CSS selectors for including & excluding content from crawling.'),
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function external_crawler_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'node/add' on 'admin/content' page.
  if ($root_path == 'admin/config/search/external_crawler') {
    $item = menu_get_item('admin/config/search/external_crawler/site/add');
    if (is_array($item) && $item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function external_crawler_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'facetapi_facet_display_form' && $form['#facetapi']['facet']['name'] == 'external_source') {
    $form['workflow']['exclude_' . $form['#facetapi']['facet']['name'] . '_from_search'] = array(
      '#type' => 'radios',
      '#title' => t('Exclude from search'),
      '#default_value' => variable_get('exclude_' . $form['#facetapi']['facet']['name'] . '_from_search', 0),
      '#options' => array(t('Disabled'), t('Enabled')),
    );
    $form['#submit'][] = '_external_crawler_form_submit';
  }
}

/**
 * Implements hook_cron().
 */
function external_crawler_cron() {
  module_load_include('inc', 'external_crawler');

  $query = db_select('external_crawler_site', 's')
    ->fields('s');

  // Handle only non XML sites.
  if (module_exists('xml_crawler')) {
    $query->condition('s.is_xml', '1', '!=');
  }

  $sites = $query->execute()->fetchAll();

  foreach ($sites as $site) {
    // First check or this site has ever run from root.
    $pagekey = _external_crawler_generate_pagekey($site, $site->url);
    $pagedata = _external_crawler_get_pagedata($pagekey);
    if (!$pagedata['date']) {
      _external_crawler_index_page($site->url, $site);
      // Update site last crawl date.
      _external_crawler_update_site_date($site);
    }

    // Setup query to retrieve the pages.
    $or = db_or();
    $or->condition('p.date', time() - $site->check_interval, '<=');
    $or->isNull('p.date');
    $pages = db_select('external_crawler_page', 'p')
      ->fields('p', array('url'))
      ->condition('p.site_id', $site->site_id)
      ->condition($or)
      ->orderBy('p.date', 'ASC')
      ->range(0, $site->max_run)
      ->execute()
      ->fetchAll();

    // Index the pages.
    foreach ($pages as $page) {
      _external_crawler_index_page($page->url, $site);
    }

    // Update site last crawl date.
    if ($pages) {
      _external_crawler_update_site_date($site);
    }
  }
}

/**
 * Implements hook_cronapi().
 */
function external_crawler_cronapi($op, $job = NULL) {
  // Run every hour.
  $items['external_crawler_cron'] = array(
    'description' => 'Run External Crawler',
    'rule' => '0 */1 * * *',
  );

  return $items;
}

/**
 * Fix link in search results.
 */
function external_crawler_preprocess_search_result(&$variables) {
  if ($variables['result']['fields']['entity_type'] === 'external_crawler') {
    $variables['url'] = $variables['result']['fields']['url'];
    $variables['result']['link'] = $variables['result']['fields']['url'];
    $variables['snippet'] = _external_crawler_clear_body($variables['snippet']);
  }
}

/**
 * Unset search result if facet is not active.
 */
function external_crawler_apachesolr_process_results(array &$results, DrupalSolrQueryInterface $query) {
  // Only execute if wim external search is enabled.
  if (module_exists('wim_external_search') && variable_get('exclude_external_source_from_search', 0) == 1) {
    // Get SOLR environment id.
    $solr = apachesolr_default_environment();
    $searcher = 'apachesolr@' . $solr;
    // Load the facetapi adapter.
    $adapter = facetapi_adapter_load($searcher);
    if (!empty($adapter)) {
      // Check if a filter for external sources is active.
      $active = FALSE;
      $active_items = $adapter->getAllActiveItems();
      foreach ($active_items as $id => $result) {
        if ($result['facets'][0] == 'external_source') {
          // Stop loop if 1 active filter of external source is found.
          $active = TRUE;
          break;
        }
      }

      // By default don't show external sources.
      foreach ($results as $id => $result) {
        if (isset($results[$id]['entity_type']) && $results[$id]['entity_type'] == 'external_crawler' && $active == FALSE) {
          unset($results[$id]);
        }
      }
    }
  }
}

/**
 * Implements hook_facetapi_searcher_info_alter().
 */
function external_crawler_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as $index => $info) {
    if ($info['adapter'] === 'apachesolr') {
      $searcher_info[$index]['types']['external_crawler'] = 'external_crawler';
    }
  }
}

/**
 * Implements hook_facetapi_facet_info().
 */
function external_crawler_facetapi_facet_info(array $searcher_info) {
  $facets = array();
  // Facets are usually associated with the type of content stored in the index.
  if (isset($searcher_info['types']['external_crawler']) && $searcher_info['adapter'] === 'apachesolr') {
    $facets['external_source'] = array(
      'label' => t('External Source'),
      'description' => t('Filter by external source.'),
      'field' => 'entity_id',
      'map callback' => 'external_crawler_source_map',
      'default widget' => 'links',
      'default sorts' => array(),
      'alter callbacks' => array('external_crawler_source_alter'),
    );
  }

  return $facets;
}

/**
 * Map callback for external source filter.
 */
function external_crawler_source_map(array $values) {
  $map = array();
  foreach ($values as $value) {
    $site = _external_crawler_fetch_sites($value);
    if ($site) {
      $map[$value] = $site->name;
    }
  }

  return $map;
}

/**
 * Add a submit handler/function to the form.
 */
function _external_crawler_form_submit($form, &$form_state) {
  if (isset($form['workflow']['exclude_' . $form['#facetapi']['facet']['name'] . '_from_search']['#value'])) {
    variable_set('exclude_' . $form['#facetapi']['facet']['name'] . '_from_search', $form['workflow']['exclude_' . $form['#facetapi']['facet']['name'] . '_from_search']['#value']);
  }
}

/**
 * Alter external source facet build.
 */
function external_crawler_source_alter(array &$build, $adapter, $facet) {
  // Remove from build values which does not exist.
  foreach ($build as $build_id => $count) {
    if (!_external_crawler_fetch_sites($build_id)) {
      unset($build[$build_id]);
    }
  }
}
